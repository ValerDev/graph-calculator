[{"C:\\Users\\John Doe\\Desktop\\graph-calculator\\src\\index.js":"1","C:\\Users\\John Doe\\Desktop\\graph-calculator\\src\\reportWebVitals.js":"2","C:\\Users\\John Doe\\Desktop\\graph-calculator\\src\\App.js":"3"},{"size":517,"mtime":1608228687335,"results":"4","hashOfConfig":"5"},{"size":375,"mtime":1608228687335,"results":"6","hashOfConfig":"5"},{"size":6075,"mtime":1608412827373,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"15xjhi5",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\John Doe\\Desktop\\graph-calculator\\src\\index.js",[],["16","17"],"C:\\Users\\John Doe\\Desktop\\graph-calculator\\src\\reportWebVitals.js",[],"C:\\Users\\John Doe\\Desktop\\graph-calculator\\src\\App.js",["18","19","20","21","22","23","24"],"import React from 'react'\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    func: '',\r\n    max: '',\r\n    min: '',\r\n    colors: ['crimson', 'SeaGreen', 'RoyalBlue', 'DarkOrange', 'Indigo'],\r\n    randomNumber: 1,\r\n    x: [],\r\n    y: [],\r\n    c: null,\r\n    ctx: null,\r\n    centerX: null,\r\n    centerY: null,\r\n    blocker: false,\r\n  }\r\n  componentDidMount() {\r\n\r\n    //create canvas\r\n    const c = document.getElementById(\"myCanvas\")\r\n    const ctx = c.getContext(\"2d\")\r\n\r\n    //center\r\n    const center = [c.width / 2, c.height / 2]\r\n    this.setState({\r\n      c: c,\r\n      ctx: ctx,\r\n      centerX: center[0],\r\n      centerY: center[1],\r\n    })\r\n    // X and Y lines\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = 'white';\r\n    ctx.moveTo(20, 250)\r\n    ctx.lineTo(480, 250)\r\n    ctx.moveTo(250, 20)\r\n    ctx.lineTo(250, 480)\r\n    ctx.font = \"30px Cursive\";\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillText(\"X\", 470, 230);\r\n    ctx.fillText(\"Y\", 270, 30);\r\n    ctx.fillText(\"^\", 241, 40);\r\n    ctx.fillText(\">\", 475, 260);\r\n    ctx.font = \"8px Cursive\";\r\n    for (let i = -20, j = 43; i < 0, j < 250; i += 4, j += 40) {\r\n      ctx.fillText(i, j, 265) ;\r\n    }\r\n    for (let i = 4, j = 285; i < 20, j < 460; i += 4, j += 40) {\r\n      ctx.fillText(i, j, 265);\r\n    }\r\n\r\n    for (let i = 20, j = 50; i < 4, j < 250; i -= 4, j += 40) {\r\n      ctx.fillText(i, 260, j);\r\n    }\r\n\r\n    for (let i = -4, j = 290; i < -20, j < 480; i -= 4, j += 40) {\r\n      ctx.fillText(i, 260, j);\r\n    }\r\n    ctx.stroke();\r\n    ctx.lineWidth = 3;\r\n  }\r\n\r\n  // create graph function\r\n\r\n  plotFunction = (e) => {\r\n    this.setState({\r\n      randomNumber: Math.floor(Math.random() * (this.state.colors.length))\r\n    })\r\n    e.preventDefault()\r\n    let exp = this.state.func\r\n    this.state.ctx.beginPath();\r\n    this.state.ctx.strokeStyle = this.state.colors[this.state.randomNumber];\r\n    for (let i = this.state.min; i <= this.state.max; i++) {\r\n      let expToArr = exp.split('')\r\n\r\n      if (expToArr.join('').includes('x')) {\r\n        expToArr.forEach((e, index) => {\r\n          if (e === \"x\") {\r\n            expToArr[index] = `(${i})`\r\n          }\r\n        })\r\n      }\r\n      if (expToArr.join('').includes('^')) {\r\n        expToArr.forEach((e, index) => {\r\n          if (e === \"^\") {\r\n            expToArr[expToArr.indexOf('^')] = '**';\r\n          }\r\n        })\r\n      }\r\n      if (expToArr.join('').includes(\"sqrt\")) {\r\n        console.log(\"asd\", expToArr.join(''));\r\n        expToArr = expToArr.join('').replace(/sqrt/gi, \"Math.sqrt\").split('')\r\n      }\r\n      console.log(\"verjnakan  \", expToArr)\r\n      try {\r\n        this.state.x.push(i * 10);\r\n        this.state.y.push(+eval(expToArr.join('')) * 10)\r\n        this.state.sqrt = true\r\n      }\r\n      catch (err) {\r\n        document.querySelector(\".App\").innerHTML = `\r\n        <div class=\"error-block\">\r\n          <p class=\"error\">\r\n            You have entered an incorrect math expression, please read the notes to use the app correctly \r\n          </p>\r\n          <p class=\"back\" onClick=\"location.reload()\">Back to app</p>\r\n        </div>`\r\n      }\r\n\r\n      this.setState({\r\n        x: [],\r\n        y: [],\r\n      })\r\n    }\r\n    this.createGraph()\r\n  }\r\n  createGraph = () => {\r\n    if (!this.state.blocker) {\r\n      this.state.ctx.moveTo(\r\n        this.state.centerX + this.state.x[0],\r\n        this.state.centerY - this.state.y[0]);\r\n      this.state.ctx.lineTo(\r\n        this.state.centerX + this.state.x[1],\r\n        this.state.centerY - this.state.y[1]);\r\n      this.setState({\r\n        blocker: true\r\n      })\r\n    }\r\n    for (let i = 1; i < this.state.x.length; i++) {\r\n      this.state.ctx.lineTo(\r\n        this.state.centerX + this.state.x[i],\r\n        this.state.centerY - this.state.y[i]);\r\n    }\r\n    this.state.ctx.stroke()\r\n    this.setState({\r\n      blocker: false\r\n    })\r\n  }\r\n\r\n  //inputs handeling\r\n\r\n  handlePlotFunction = (e) => {\r\n    this.setState({\r\n      func: e.target.value\r\n    })\r\n  }\r\n\r\n  handleMaxValue = (e) => {\r\n    this.setState({\r\n      max: Number(e.target.value)\r\n    })\r\n  }\r\n\r\n  handleMinValue = (e) => {\r\n    this.setState({\r\n      min: Number(e.target.value)\r\n    })\r\n  }\r\n\r\n  // back to app \r\n\r\n  backToApp = () => {\r\n    this.componentDidMount();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"main-content\">\r\n\r\n          <form className=\"inputs-block\">\r\n            <label htmlFor=\"expressonY\"  >\r\n              &nbsp; Y =\r\n            <input id=\"expressonY\" onChange={this.handlePlotFunction} placeholder=\"Mathematical expression..\" autoComplete=\"off\" />\r\n            </label>\r\n            <div className=\"digital-range\">\r\n              <input onChange={this.handleMinValue} placeholder=\"Min value of x..\" />\r\n              <input onChange={this.handleMaxValue} placeholder=\"Max value of x..\" />\r\n            </div>\r\n            <button onClick={this.plotFunction}>Plot function</button>\r\n          </form>\r\n          <div className=\"docs\">\r\n            <h2 className='title'>Notes</h2>\r\n              <ul>\r\n                <li>\r\n                  Please enter the variable as ‘x’( e.g. 1 / x).\r\n            </li>\r\n                <li>\r\n                  Enter the expression without equation. (Do not do y=x+4. enter only x+4 ).\r\n            </li>\r\n                <li>\r\n                  For power expressions you can use both the “^” sign and the “*” sign (e.g.  x^2 shows the same result as x*x).\r\n            </li>\r\n                <li>\r\n                  For plotting the square root use sqrt() function. (e.g.  sqrt(x) ).\r\n            </li>\r\n                <li>\r\n                  You can also choose the interval from minimum to maximum to plot the function.\r\n            </li>\r\n              </ul>\r\n              <br />\r\n              Have fun!\r\n          </div>\r\n        </div>\r\n          <button onClick={()=>window.location.reload()} className=\"clear-graphs\">Clear graphs</button>\r\n          <canvas id=\"myCanvas\" width=\"500\" height=\"500\" ></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":48,"column":36,"nodeType":"31","messageId":"32","endLine":48,"endColumn":37},{"ruleId":"29","severity":1,"message":"30","line":51,"column":36,"nodeType":"31","messageId":"32","endLine":51,"endColumn":37},{"ruleId":"29","severity":1,"message":"30","line":55,"column":35,"nodeType":"31","messageId":"32","endLine":55,"endColumn":36},{"ruleId":"29","severity":1,"message":"30","line":59,"column":38,"nodeType":"31","messageId":"32","endLine":59,"endColumn":39},{"ruleId":"33","severity":1,"message":"34","line":75,"column":5,"nodeType":"35","endLine":75,"endColumn":19},{"ruleId":"36","severity":1,"message":"37","line":100,"column":28,"nodeType":"38","messageId":"39","endLine":100,"endColumn":32},{"ruleId":"33","severity":1,"message":"34","line":101,"column":9,"nodeType":"35","endLine":101,"endColumn":19},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]